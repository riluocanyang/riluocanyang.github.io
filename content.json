[{"title":"javascript基础---数据类型","date":"2017-08-04T14:11:50.000Z","path":"2017/08/04/javascript基础1/","text":"##一、Javascript简介&emsp;&emsp; 在上个世纪1995年，Netscape公司凭借其Navigator浏览器成为第一代互联网公司。之后，Netscape公司希望能在静态HTML页面上添加一些动态效果，于是Brendan Eich在两周之内设计出了JavaScript语言。由于当时java很火，Netscape公司希望借java热风推广，便取名为javascript。&emsp;&emsp; 之后，微软模仿javascript开发了Jscript，此时，相当于有了两个JavaScript版本。为了让Javascript成为国际标准，几个公司联合ECMA组织制订了Javascript语言的标准，被称为ECMAScript标准。&emsp;&emsp; ECMA就是对标准规定的各个方面内容的语言的描述，可以理解为ECMA仅仅是一个描述，定义了脚本语言的所有属性、方法和对象。其他的语言可以实现ECMAScript，来作为功能的基准，javascript就是这样。&emsp;&emsp; web浏览器只是ECMAScript实现可能的宿舍环境之一，宿主环境不仅提供基本的ECMAScript实现，同时也会提供语言的扩展。可以理解为每个浏览器都有自己的ECMAScript接口，然后这个实现又被扩展，包含了BOM和DOM以及其他扩展。&emsp;&emsp;一个完整的javascript实现应该由下列三个不同的部分组成：&emsp;&emsp;● ECMAScript（核心） ECMAScript描述了该语言的语法和基本对象；&emsp;&emsp;● DOM（文档对象模型）DOM 描述了处理网页内容的方法和接口；&emsp;&emsp;● BOM（浏览器对象模型）BOM描述了与浏览器进行交互的方法和接口。 ##二、Javascript数据类型&emsp;&emsp;ECMAScript中有6种简单数据结构（基本数据结构）：Undefined、Null、Boolean、Number、String、Symbol。还有一种复杂结构类型（引用类型）Object。&emsp;&emsp;基本数据类型保存在内存的栈区，复制变量时会创建其值的一个副本。基本数据类型可以使用typeof区分。&emsp;&emsp;引用类型的存储是由内存的栈区和堆区共同完成，引用类型的值是对象,保存在堆内存中，栈区内存保存变量标识符和指向堆内存中该对象的指针，也就是该对象在堆内存的地址。 ###1、Undefined类型&emsp;&emsp;使用var声明但是未初始化的变量其值为undefined。使用未声明的变量会报错。如：&emsp;&emsp;但是，对未初始化的变量执行typeof操作符会返回undefined值，对未声明的变量执行typeof操作符也会返回undefined。 ###2、Null类型如果定义的变量将来准备用于保存变量，那么最好将该变量初始化为null。 ####null和undefined的区别undefined派生自null，用相等操作符(==)它们是相等的。在if语句中，null和undefined都会被转换为false。但是，它们都不等于0，false或””null转为数值时值为0,undefined转为数值时值为NaN.typeof null 返回object, typeof undefined 返回undefined.undefined表示“不存在的值”，应用场景:&emsp;&emsp;1、变量声明了，但是没有赋值，会有一个undefined的默认值；&emsp;&emsp;2、调用函数时，函数没有赋值的参数，默认为undefined；&emsp;&emsp;3、试图访问不存在的对象属性时，会返回undefined值；&emsp;&emsp;4、函数没有返回值，默认返回undefined。null表示“没有对象”，应用场景：&emsp;&emsp;1、作为函数的参数，表示该函数的参数不是对象；&emsp;&emsp;2、作为原型对象链的终点；&emsp;&emsp;3、通过分配null值，有效的清除引用，并假设对象没有引用其他代码，指定垃圾回收，确保回收内存。&emsp;&emsp;在ES5中，Object.prototype.toString()方法，已经成为实际的类型检验标准。 ##Boolean类型","tags":[{"name":"javascript","slug":"javascript","permalink":"http://yoursite.com/tags/javascript/"}]},{"title":"javascript基础---数据类型","date":"2017-08-04T14:11:50.000Z","path":"2017/08/04/javascript基础---数据类型/","text":"一、Javascript简介&emsp;&emsp; 在上个世纪1995年，Netscape公司凭借其Navigator浏览器成为第一代互联网公司。之后，Netscape公司希望能在静态HTML页面上添加一些动态效果，于是Brendan Eich在两周之内设计出了JavaScript语言。由于当时java很火，Netscape公司希望借java热风推广，便取名为javascript。&emsp;&emsp; 之后，微软模仿javascript开发了Jscript，此时，相当于有了两个JavaScript版本。为了让Javascript成为国际标准，几个公司联合ECMA组织制订了Javascript语言的标准，被称为ECMAScript标准。&emsp;&emsp; ECMA就是对标准规定的各个方面内容的语言的描述，可以理解为ECMA仅仅是一个描述，定义了脚本语言的所有属性、方法和对象。其他的语言可以实现ECMAScript，来作为功能的基准，javascript就是这样。&emsp;&emsp; web浏览器只是ECMAScript实现可能的宿舍环境之一，宿主环境不仅提供基本的ECMAScript实现，同时也会提供语言的扩展。可以理解为每个浏览器都有自己的ECMAScript接口，然后这个实现又被扩展，包含了BOM和DOM以及其他扩展。&emsp;&emsp;一个完整的javascript实现应该由下列三个不同的部分组成：&emsp;&emsp;● ECMAScript（核心） ECMAScript描述了该语言的语法和基本对象；&emsp;&emsp;● DOM（文档对象模型）DOM 描述了处理网页内容的方法和接口；&emsp;&emsp;● BOM（浏览器对象模型）BOM描述了与浏览器进行交互的方法和接口。 二、Javascript数据类型&emsp;&emsp;ECMAScript中有6种简单数据结构（基本数据结构）：Undefined、Null、Boolean、Number、String、Symbol。还有一种复杂结构类型（引用类型）Object。&emsp;&emsp;基本数据类型保存在内存的栈区，复制变量时会创建其值的一个副本。基本数据类型可以使用typeof区分。&emsp;&emsp;引用类型的存储是由内存的栈区和堆区共同完成，引用类型的值是对象,保存在堆内存中，栈区内存保存变量标识符和指向堆内存中该对象的指针，也就是该对象在堆内存的地址。 1、Undefined类型&emsp;&emsp;使用var声明但是未初始化的变量其值为undefined。使用未声明的变量会报错。如：&emsp;&emsp;但是，对未初始化的变量执行typeof操作符会返回undefined值，对未声明的变量执行typeof操作符也会返回undefined。 2、Null类型如果定义的变量将来准备用于保存变量，那么最好将该变量初始化为null。 null和undefined的区别undefined派生自null，用相等操作符(==)它们是相等的。在if语句中，null和undefined都会被转换为false。但是，它们都不等于0，false或””null转为数值时值为0,undefined转为数值时值为NaN.typeof null 返回object, typeof undefined 返回undefined.undefined表示“不存在的值”，应用场景:&emsp;&emsp;1、变量声明了，但是没有赋值，会有一个undefined的默认值；&emsp;&emsp;2、调用函数时，函数没有赋值的参数，默认为undefined；&emsp;&emsp;3、试图访问不存在的对象属性时，会返回undefined值；&emsp;&emsp;4、函数没有返回值，默认返回undefined。null表示“没有对象”，应用场景：&emsp;&emsp;1、作为函数的参数，表示该函数的参数不是对象；&emsp;&emsp;2、作为原型对象链的终点；&emsp;&emsp;3、通过分配null值，有效的清除引用，并假设对象没有引用其他代码，指定垃圾回收，确保回收内存。&emsp;&emsp;在ES5中，Object.prototype.toString()方法，已经成为实际的类型检验标准。 Boolean类型","tags":[{"name":"javascript","slug":"javascript","permalink":"http://yoursite.com/tags/javascript/"}]},{"title":"认识vue.js","date":"2017-07-28T07:45:17.000Z","path":"2017/07/28/认识vue.js/","text":"我们首先了解一下MVX模式MVX模式：MVC、MVP、MVVM MVCMVC一般分为Model（模型）、View（视图）和Controller（控制器）。 View一般通过Controller来和View进行联系。Controller是View和Model的协调者。基本联系都是单向的。1.View传送指令到Controller2.Controll接收指令处理后，要求Model改变状态3.Model将新的数据传送给View。 MVPMVP一般分为Model（模型）、View（视图）和Presenter。Presenter把View和Model进行了分离，而且，Presenter与具体的View没有直接联系，是通过定义好的接口进行联系的。 MVVMMVVM分为Model（模型）、View（视图）和ViewModel。View的变化会自动更新到ViewModel，viewModel的变化也会同步到View上。MVVM采用双向绑定（data-binding）","tags":[{"name":"vue.js","slug":"vue-js","permalink":"http://yoursite.com/tags/vue-js/"},{"name":"前端框架","slug":"前端框架","permalink":"http://yoursite.com/tags/前端框架/"}]},{"title":"Hello World","date":"2017-02-27T03:08:12.227Z","path":"2017/02/27/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]